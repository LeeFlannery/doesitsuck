@model DoesItSuck.Models.Review

<h2>Tell us: Does It Suck?</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <div>
            @Html.LabelFor(model => model.Title)
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>

        <div>
            @Html.LabelFor(model => model.Body, new { @class = "bodyLabel" })
            @Html.EditorFor(model => model.Body)
            @Html.ValidationMessageFor(model => model.Body)
        </div>

        <div>

            @Html.LabelFor(model => model.Category)
            @foreach (var value in Enum.GetValues(typeof(DoesItSuck.Models.Category)))
            {
                @Html.RadioButtonFor(model => model.Category, value,  new { id = value, @class = value + "_radio" })
                @Html.Label(value.ToString(), new { @class = value + "_radio" })
            }    
        </div>
        <div>
            @Html.LabelFor(model => model.Rating)
            @Html.TextBoxFor(model => model.Rating, new {min="1", max="5", step="1" } )
            @Html.ValidationMessageFor(model => model.Rating)
        </div>
        <div>
            @Html.LabelFor(model => model.Link)
            @Html.EditorFor(model => model.Link)
            @Html.ValidationMessageFor(model => model.Link)
        </div>
        
        <p>
            <input type="submit" class="submitLink" value="DO IT!" />
            @Html.ActionLink("be lame", "Index",null,new{@class = "cancelLink"})
        </p>
    </fieldset>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
